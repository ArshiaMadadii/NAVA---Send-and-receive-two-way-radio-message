
AVRASM ver. 2.1.30  D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm Sat Dec 30 12:00:55 2023

D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm(1088): warning: Register r4 already defined by the .DEF directive
D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm(1089): warning: Register r5 already defined by the .DEF directive
D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm(1090): warning: Register r6 already defined by the .DEF directive
D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm(1091): warning: Register r7 already defined by the .DEF directive
D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm(1092): warning: Register r9 already defined by the .DEF directive
D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm(1094): warning: Register r11 already defined by the .DEF directive
D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm(1096): warning: Register r13 already defined by the .DEF directive
D:\Lesson\AVR\0-Project\Digital2\Final\Send and receive two-way radio message\1.Final Code\Debug\List\NAVA(Final).asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _num=R4
                 	.DEF _num_msb=R5
                 	.DEF _number=R6
                 	.DEF _number_msb=R7
                 	.DEF _rx_rd_index=R9
                 	.DEF _rx_wr_index=R8
                 	.DEF _rx_counter=R11
                 	.DEF __lcd_x=R10
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 00f8 	JMP  _ext_int0_isr
000004 940c 0103 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0110 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000036 756e
000037 626d
000038 7265
000039 3d20      	.DB  0x6E,0x75,0x6D,0x62,0x65,0x72,0x20,0x3D
00003a 2520
00003b 6434
00003c 3d00
00003d 003e      	.DB  0x20,0x25,0x34,0x64,0x0,0x3D,0x3E,0x0
00003e 2020
00003f 2020
000040 2020
000041 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000042 2020
000043 2020
000044 2020
000045 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000046 2020
000047 0020      	.DB  0x20,0x20,0x20,0x0
                 _0x2000003:
000048 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000049 0001      	.DW  0x01
00004a 0002      	.DW  0x02
00004b 0066      	.DW  __REG_BIT_VARS*2
                 
00004c 0004      	.DW  0x04
00004d 0008      	.DW  0x08
00004e 0068      	.DW  __REG_VARS*2
                 
00004f 0003      	.DW  0x03
000050 0160      	.DW  _0x26
000051 0079      	.DW  _0x0*2+13
                 
000052 0014      	.DW  0x14
000053 0163      	.DW  _0x26+3
000054 007c      	.DW  _0x0*2+16
                 
000055 0002      	.DW  0x02
000056 0196      	.DW  __base_y_G100
000057 0090      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bffb      	OUT  GICR,R31
00005e bfeb      	OUT  GICR,R30
00005f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000060 e08d      	LDI  R24,(14-2)+1
000061 e0a2      	LDI  R26,2
000062 27bb      	CLR  R27
                 __CLEAR_REG:
000063 93ed      	ST   X+,R30
000064 958a      	DEC  R24
000065 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000066 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000067 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000068 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000069 93ed      	ST   X+,R30
00006a 9701      	SBIW R24,1
00006b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006c e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006e 9185      	LPM  R24,Z+
00006f 9195      	LPM  R25,Z+
000070 9700      	SBIW R24,0
000071 f061      	BREQ __GLOBAL_INI_END
000072 91a5      	LPM  R26,Z+
000073 91b5      	LPM  R27,Z+
000074 9005      	LPM  R0,Z+
000075 9015      	LPM  R1,Z+
000076 01bf      	MOVW R22,R30
000077 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000078 9005      	LPM  R0,Z+
000079 920d      	ST   X+,R0
00007a 9701      	SBIW R24,1
00007b f7e1      	BRNE __GLOBAL_INI_LOOP
00007c 01fb      	MOVW R30,R22
00007d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007f bfed      	OUT  SPL,R30
000080 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000081 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000082 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000083 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000084 940c 0159 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Project : Send and receive two-way radio message(NAVA)
                 ;Version : 1.01
                 ;Date    : 12/25/2023
                 ;Author  : Arshia Madadi
                 ;Company : SCU - University
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16A
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 1.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h> //Header marbot be ATmega
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>   //header marbot LCD
                 ;#include <stdio.h> // Header marbot be dastorat Sprintf , Scanf va ...
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h> // baray estefade az delay
                 ;
                 ;//Paye hay KeyPad
                 ;//Pin Keypad
                 ;
                 ;#define   ROW1   PORTB.3
                 ;#define   ROW2   PORTB.4
                 ;#define   ROW3   PORTB.5
                 ;#define   ROW4   PORTB.6
                 ;#define   C1     PINB.0
                 ;#define   C2     PINB.1
                 ;#define   C3     PINB.2
                 ;
                 ;unsigned char str[16]; // tarif array STR
                 ;int num  , number ; // tarif motegayer "num","number"
                 ;bit p ; //  as pressed
                 ;
                 ;    //Code Keypad
                 ;
                 ;void show()
                 ; 0000 0029 {
                 
                 	.CSEG
                 _show:
                 ; .FSTART _show
                 ; 0000 002A     if(p == 1)
000086 fe20      	SBRS R2,0
000087 c00d      	RJMP _0x3
                 ; 0000 002B     {
                 ; 0000 002C         p = 0 ;
000088 94e8      	CLT
000089 f820      	BLD  R2,0
                 ; 0000 002D         number = (number * 10) + num ;
00008a 01f3      	MOVW R30,R6
00008b e0aa      	LDI  R26,LOW(10)
00008c e0b0      	LDI  R27,HIGH(10)
00008d 940e 0461 	CALL __MULW12
00008f 0de4      	ADD  R30,R4
000090 1df5      	ADC  R31,R5
000091 013f      	MOVW R6,R30
                 ; 0000 002E         lcd_clear();
000092 d115      	RCALL _lcd_clear
                 ; 0000 002F         lcd_gotoxy(0,0);
000093 940e 03d5 	CALL SUBOPT_0x0
                 ; 0000 0030         sprintf(str,"number = %4d",number);
                 ; 0000 0031         //Megdar "number" ra(Line = ) dar "str" beriz //Dast be khat bala nazan kharab mishe
                 ; 0000 0032         lcd_puts(str);
                 ; 0000 0033         // Meghdar "str"(Line = ) ra namyesh bede
                 ; 0000 0034     }
                 ; 0000 0035 }
                 _0x3:
000095 9508      	RET
                 ; .FEND
                 ;void keyboard()
                 ; 0000 0037     {
                 _keyboard:
                 ; .FSTART _keyboard
                 ; 0000 0038     ROW1 = 0 ;
000096 98c3      	CBI  0x18,3
                 ; 0000 0039     delay_ms(50);   // in normal we use 2ms but proteus can not detect
000097 940e 03ef 	CALL SUBOPT_0x1
                 ; 0000 003A         if(C1==0) num = 1 ,  p = 1  ;   // P AS PRESSED
000099 99b0      	SBIC 0x16,0
00009a c005      	RJMP _0x6
00009b e0e1      	LDI  R30,LOW(1)
00009c e0f0      	LDI  R31,HIGH(1)
00009d 012f      	MOVW R4,R30
00009e 9468      	SET
00009f f820      	BLD  R2,0
                 ; 0000 003B         if(C2==0) num = 2  , p = 1;
                 _0x6:
0000a0 99b1      	SBIC 0x16,1
0000a1 c005      	RJMP _0x7
0000a2 e0e2      	LDI  R30,LOW(2)
0000a3 e0f0      	LDI  R31,HIGH(2)
0000a4 012f      	MOVW R4,R30
0000a5 9468      	SET
0000a6 f820      	BLD  R2,0
                 ; 0000 003C         if(C3==0) num = 3  , p = 1  ;
                 _0x7:
0000a7 99b2      	SBIC 0x16,2
0000a8 c005      	RJMP _0x8
0000a9 e0e3      	LDI  R30,LOW(3)
0000aa e0f0      	LDI  R31,HIGH(3)
0000ab 012f      	MOVW R4,R30
0000ac 9468      	SET
0000ad f820      	BLD  R2,0
                 ; 0000 003D     delay_ms(50);   // in normal we use 2ms but proteus can not detect
                 _0x8:
0000ae 940e 03ef 	CALL SUBOPT_0x1
                 ; 0000 003E     ROW1 = 1 ;
0000b0 9ac3      	SBI  0x18,3
                 ; 0000 003F 
                 ; 0000 0040     show();
0000b1 dfd4      	RCALL _show
                 ; 0000 0041 
                 ; 0000 0042     ROW2 = 0 ;
0000b2 98c4      	CBI  0x18,4
                 ; 0000 0043     delay_ms(50);   // in normal we use 2ms but proteus can not detect
0000b3 940e 03ef 	CALL SUBOPT_0x1
                 ; 0000 0044         if(C1==0) num = 4  , p = 1 ;
0000b5 99b0      	SBIC 0x16,0
0000b6 c005      	RJMP _0xD
0000b7 e0e4      	LDI  R30,LOW(4)
0000b8 e0f0      	LDI  R31,HIGH(4)
0000b9 012f      	MOVW R4,R30
0000ba 9468      	SET
0000bb f820      	BLD  R2,0
                 ; 0000 0045         if(C2==0) num = 5  , p = 1 ;
                 _0xD:
0000bc 99b1      	SBIC 0x16,1
0000bd c005      	RJMP _0xE
0000be e0e5      	LDI  R30,LOW(5)
0000bf e0f0      	LDI  R31,HIGH(5)
0000c0 012f      	MOVW R4,R30
0000c1 9468      	SET
0000c2 f820      	BLD  R2,0
                 ; 0000 0046         if(C3==0) num = 6  , p = 1 ;
                 _0xE:
0000c3 99b2      	SBIC 0x16,2
0000c4 c005      	RJMP _0xF
0000c5 e0e6      	LDI  R30,LOW(6)
0000c6 e0f0      	LDI  R31,HIGH(6)
0000c7 012f      	MOVW R4,R30
0000c8 9468      	SET
0000c9 f820      	BLD  R2,0
                 ; 0000 0047     delay_ms(50);   // in normal we use 2ms but proteus can not detect
                 _0xF:
0000ca 940e 03ef 	CALL SUBOPT_0x1
                 ; 0000 0048     ROW2 = 1 ;
0000cc 9ac4      	SBI  0x18,4
                 ; 0000 0049 
                 ; 0000 004A     show();
0000cd dfb8      	RCALL _show
                 ; 0000 004B 
                 ; 0000 004C     ROW3 = 0 ;
0000ce 98c5      	CBI  0x18,5
                 ; 0000 004D     delay_ms(50);   // in normal we use 2ms but proteus can not detect
0000cf 940e 03ef 	CALL SUBOPT_0x1
                 ; 0000 004E         if(C1==0) num = 7 , p = 1 ;
0000d1 99b0      	SBIC 0x16,0
0000d2 c005      	RJMP _0x14
0000d3 e0e7      	LDI  R30,LOW(7)
0000d4 e0f0      	LDI  R31,HIGH(7)
0000d5 012f      	MOVW R4,R30
0000d6 9468      	SET
0000d7 f820      	BLD  R2,0
                 ; 0000 004F         if(C2==0) num = 8 , p = 1;
                 _0x14:
0000d8 99b1      	SBIC 0x16,1
0000d9 c005      	RJMP _0x15
0000da e0e8      	LDI  R30,LOW(8)
0000db e0f0      	LDI  R31,HIGH(8)
0000dc 012f      	MOVW R4,R30
0000dd 9468      	SET
0000de f820      	BLD  R2,0
                 ; 0000 0050         if(C3==0) num = 9 , p = 1  ;
                 _0x15:
0000df 99b2      	SBIC 0x16,2
0000e0 c005      	RJMP _0x16
0000e1 e0e9      	LDI  R30,LOW(9)
0000e2 e0f0      	LDI  R31,HIGH(9)
0000e3 012f      	MOVW R4,R30
0000e4 9468      	SET
0000e5 f820      	BLD  R2,0
                 ; 0000 0051     delay_ms(50);   // in normal we use 2ms but proteus can not detect
                 _0x16:
0000e6 940e 03ef 	CALL SUBOPT_0x1
                 ; 0000 0052     ROW3 = 1 ;
0000e8 9ac5      	SBI  0x18,5
                 ; 0000 0053 
                 ; 0000 0054     show();
0000e9 df9c      	RCALL _show
                 ; 0000 0055 
                 ; 0000 0056     ROW4 = 0 ;
0000ea 98c6      	CBI  0x18,6
                 ; 0000 0057     delay_ms(50);   // in normal we use 2ms but proteus can not detect
0000eb 940e 03ef 	CALL SUBOPT_0x1
                 ; 0000 0058         if(C2==0) num = 0  , p = 1 ;
0000ed 99b1      	SBIC 0x16,1
0000ee c004      	RJMP _0x1B
0000ef 2444      	CLR  R4
0000f0 2455      	CLR  R5
0000f1 9468      	SET
0000f2 f820      	BLD  R2,0
                 ; 0000 0059     delay_ms(50);   // in normal we use 2ms but proteus can not detect
                 _0x1B:
0000f3 940e 03ef 	CALL SUBOPT_0x1
                 ; 0000 005A     ROW4 = 1 ;
0000f5 9ac6      	SBI  0x18,6
                 ; 0000 005B 
                 ; 0000 005C     show();
0000f6 df8f      	RCALL _show
                 ; 0000 005D 
                 ; 0000 005E     }
0000f7 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;// Interrupt Khareji 0
                 ;//External Interrupt 0
                 ;
                 ;//  Baray pak kardan LCD
                 ;//For Clear LCD
                 ;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) // clear mode
                 ; 0000 0069 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000f8 940e 03f3 	CALL SUBOPT_0x2
                 ; 0000 006A         number = 0 ;
0000fa 2466      	CLR  R6
0000fb 2477      	CLR  R7
                 ; 0000 006B         lcd_clear();
0000fc d0ab      	RCALL _lcd_clear
                 ; 0000 006C                         //Sefr kardan Number
                 ; 0000 006D                         //pak kardan LCD
                 ; 0000 006E                         //Zeroing the number and clearing the LCD
                 ; 0000 006F         putchar('&');
0000fd e2a6      	LDI  R26,LOW(38)
0000fe 940e 01ff 	CALL _putchar
                 ; 0000 0070                         //Ersal &
                 ; 0000 0071                         //Send &
                 ; 0000 0072                        //ba didan &,LCD pak mishe (Khat = )
                 ; 0000 0073                       //By seeing & and the LCD is cleared (Line = )
                 ; 0000 0074         lcd_gotoxy(0,0);
000100 940e 03d5 	CALL SUBOPT_0x0
                 ; 0000 0075         sprintf(str,"number = %4d",number);
                 ; 0000 0076         // meghdar "number" dobare dar "str" zakhire shavad
                 ; 0000 0077         lcd_puts(str);
                 ; 0000 0078         // meghdar "str" ra namayesh midahad
                 ; 0000 0079 
                 ; 0000 007A }
000102 c048      	RJMP _0x37
                 ; .FEND
                 ;            //Interrupt Khareji 1
                 ;            //External Interrupt 1
                 ;            //Ersal Payam
                 ;            //Send Massage
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0080 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000103 940e 03f3 	CALL SUBOPT_0x2
                 ; 0000 0081         puts(str);
000105 e7a7      	LDI  R26,LOW(_str)
000106 e0b1      	LDI  R27,HIGH(_str)
000107 940e 0206 	CALL _puts
                 ; 0000 0082         //araye marbot be STR ra ba in dastor ersal mikonim (Khat =  , tabe Show)
                 ; 0000 0083         //Send STR (Line =  , Function Show)
                 ; 0000 0084        // putchar(13); // go to new line,Vercual Terminal
                 ; 0000 0085 
                 ; 0000 0086         PORTA.1 = 1 ;
000109 9ad9      	SBI  0x1B,1
                 ; 0000 0087         // LED ghermaz roshan shavad
                 ; 0000 0088         // LED RED ON
                 ; 0000 0089         delay_ms(1000);
00010a eea8      	LDI  R26,LOW(1000)
00010b e0b3      	LDI  R27,HIGH(1000)
00010c 940e 0442 	CALL _delay_ms
                 ; 0000 008A         PORTA.1 = 0 ;
00010e 98d9      	CBI  0x1B,1
                 ; 0000 008B         // LED ghermaz khamosh shavad
                 ; 0000 008C         // LED RED OFF
                 ; 0000 008D 
                 ; 0000 008E }
00010f c03b      	RJMP _0x37
                 ; .FEND
                 ;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;// DATA_REGISTER_EMPTY tarif mishe
                 ;//register UDRE 1 mikone
                 ;//UDRE vaghti 1 bashe,Flag Bit 0 ast
                 ;//amaade daryaft etelaat jadid ast
                 ;#define RX_COMPLETE (1<<RXC)
                 ;//RX_COMPLETE tarif mishe
                 ;//RXC 1  mishe
                 ;//etelaat be UDR reside
                 ;//amade daryaft etelaate
                 ;#define FRAMING_ERROR (1<<FE)
                 ;//zamani ke 1 bashe etelaat amade nashode
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;//1 bashe etelaat hanoz neveshte nashode
                 ;#define RX_BUFFER_SIZE 15
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_rd_index=0 , rx_wr_index = 0 ;
                 ;#else
                 ;unsigned int rx_rd_index=0 , rx_wr_index = 0 ;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;// Marbor be interrupt daryaft payam
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 00B4 {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000110 940e 03f3 	CALL SUBOPT_0x2
                 ; 0000 00B5     char status,data;
                 ; 0000 00B6     //  tarif "status","data"
                 ; 0000 00B7     status=UCSRA;
000112 931a      	ST   -Y,R17
000113 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000114 b11b      	IN   R17,11
                 ; 0000 00B8     //UCSRA register bit parcham ersal, daryaft payam //Flag Bit
                 ; 0000 00B9     //Chera "status"? chon vaziyat register ra chek mikonim
                 ; 0000 00BA     data=UDR;
000115 b10c      	IN   R16,12
                 ; 0000 00BB     //UDR register daryaf, ersal etelaat
                 ; 0000 00BC 
                 ; 0000 00BD     if(data == '&')
000116 3206      	CPI  R16,38
000117 f419      	BRNE _0x22
                 ; 0000 00BE     // dar khat= gofter shode ke darsorat faal shdans Interrupt Khareji 0 '&' ersal shavad
                 ; 0000 00BF     // ba daryaft "&" LCD Girande clear mishavad
                 ; 0000 00C0     {
                 ; 0000 00C1      lcd_clear();
000118 d08f      	RCALL _lcd_clear
                 ; 0000 00C2      number = 0 ;
000119 2466      	CLR  R6
00011a 2477      	CLR  R7
                 ; 0000 00C3 
                 ; 0000 00C4      }
                 ; 0000 00C5 
                 ; 0000 00C6     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
                 _0x22:
00011b 2fe1      	MOV  R30,R17
00011c 71ec      	ANDI R30,LOW(0x1C)
00011d f559      	BRNE _0x23
                 ; 0000 00C7        {
                 ; 0000 00C8            rx_buffer[rx_wr_index++]=data;
00011e 2de8      	MOV  R30,R8
00011f 9483      	INC  R8
000120 e0f0      	LDI  R31,0
000121 57e9      	SUBI R30,LOW(-_rx_buffer)
000122 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000123 8300      	ST   Z,R16
                 ; 0000 00C9            //Ta zamani ke shart bala barghara bashad
                 ; 0000 00CA            //data ra dar rx_buffer mirizad va har bar tol
                 ; 0000 00CB            //array ra afzayesh mkdahad
                 ; 0000 00CC         #if RX_BUFFER_SIZE == 256
                 ; 0000 00CD            // special case for receiver buffer size=256
                 ; 0000 00CE            if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 00CF         #else
                 ; 0000 00D0            if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000124 e0ef      	LDI  R30,LOW(15)
000125 15e8      	CP   R30,R8
000126 f409      	BRNE _0x24
000127 2488      	CLR  R8
                 ; 0000 00D1         if (++rx_counter == RX_BUFFER_SIZE)
                 _0x24:
000128 94b3      	INC  R11
000129 e0ef      	LDI  R30,LOW(15)
00012a 15eb      	CP   R30,R11
00012b f4e9      	BRNE _0x25
                 ; 0000 00D2           {
                 ; 0000 00D3           rx_counter=0;
00012c 24bb      	CLR  R11
                 ; 0000 00D4           rx_buffer_overflow=1;
00012d 9468      	SET
00012e f821      	BLD  R2,1
                 ; 0000 00D5 
                 ; 0000 00D6           lcd_clear();
00012f d078      	RCALL _lcd_clear
                 ; 0000 00D7           lcd_gotoxy(0,1);
000130 e0e0      	LDI  R30,LOW(0)
000131 93ea      	ST   -Y,R30
000132 e0a1      	LDI  R26,LOW(1)
000133 d067      	RCALL _lcd_gotoxy
                 ; 0000 00D8           lcd_puts("=>");
                +
000134 e6a0     +LDI R26 , LOW ( _0x26 + ( 0 ) )
000135 e0b1     +LDI R27 , HIGH ( _0x26 + ( 0 ) )
                 	__POINTW2MN _0x26,0
000136 d092      	RCALL _lcd_puts
                 ; 0000 00D9           lcd_puts(rx_buffer);
000137 e8a7      	LDI  R26,LOW(_rx_buffer)
000138 e0b1      	LDI  R27,HIGH(_rx_buffer)
000139 d08f      	RCALL _lcd_puts
                 ; 0000 00DA           //Data be "rx_buffer" dade shode ast
                 ; 0000 00DB           //DATA namayesh dade mishavad
                 ; 0000 00DC           lcd_gotoxy(0,2);
00013a e0e0      	LDI  R30,LOW(0)
00013b 93ea      	ST   -Y,R30
00013c e0a2      	LDI  R26,LOW(2)
00013d d05d      	RCALL _lcd_gotoxy
                 ; 0000 00DD           lcd_puts("                   ");
                +
00013e e6a3     +LDI R26 , LOW ( _0x26 + ( 3 ) )
00013f e0b1     +LDI R27 , HIGH ( _0x26 + ( 3 ) )
                 	__POINTW2MN _0x26,3
000140 d088      	RCALL _lcd_puts
                 ; 0000 00DE           number =0 ;
000141 2466      	CLR  R6
000142 2477      	CLR  R7
                 ; 0000 00DF 
                 ; 0000 00E0           PORTA.0 = 1 ; // BLUE LED on
000143 9ad8      	SBI  0x1B,0
                 ; 0000 00E1           delay_ms(1000);
000144 eea8      	LDI  R26,LOW(1000)
000145 e0b3      	LDI  R27,HIGH(1000)
000146 940e 0442 	CALL _delay_ms
                 ; 0000 00E2           PORTA.0 = 0 ; // BLUE LED off
000148 98d8      	CBI  0x1B,0
                 ; 0000 00E3 
                 ; 0000 00E4 
                 ; 0000 00E5           }
                 ; 0000 00E6     #endif
                 ; 0000 00E7        }
                 _0x25:
                 ; 0000 00E8 
                 ; 0000 00E9 
                 ; 0000 00EA 
                 ; 0000 00EB 
                 ; 0000 00EC }
                 _0x23:
000149 9109      	LD   R16,Y+
00014a 9119      	LD   R17,Y+
                 _0x37:
00014b 91e9      	LD   R30,Y+
00014c bfef      	OUT  SREG,R30
00014d 91f9      	LD   R31,Y+
00014e 91e9      	LD   R30,Y+
00014f 91b9      	LD   R27,Y+
000150 91a9      	LD   R26,Y+
000151 9199      	LD   R25,Y+
000152 9189      	LD   R24,Y+
000153 9179      	LD   R23,Y+
000154 9169      	LD   R22,Y+
000155 90f9      	LD   R15,Y+
000156 9019      	LD   R1,Y+
000157 9009      	LD   R0,Y+
000158 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x26:
000160           	.BYTE 0x17
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00F1 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 00F2 
                 ; 0000 00F3 DDRB = 0XF8 ; // 4tay paeni khoroji bashand //Keypad
000159 efe8      	LDI  R30,LOW(248)
00015a bbe7      	OUT  0x17,R30
                 ; 0000 00F4 PORTB = 0X07 ;// 0b00000111 // pulap kon 3 tay aval ro //Keypad
00015b e0e7      	LDI  R30,LOW(7)
00015c bbe8      	OUT  0x18,R30
                 ; 0000 00F5 
                 ; 0000 00F6 PORTD.2 = 1 ; // INT 0 AS PULLUP // CLEAR
00015d 9a92      	SBI  0x12,2
                 ; 0000 00F7 PORTD.3 = 1 ; // INT 1 AS PULLUP // Send
00015e 9a93      	SBI  0x12,3
                 ; 0000 00F8 
                 ; 0000 00F9 DDRA.0 = 1 ;// LED BLUE OUTPUT
00015f 9ad0      	SBI  0x1A,0
                 ; 0000 00FA DDRA.1 = 1 ;// LED BLUE OUTPUT
000160 9ad1      	SBI  0x1A,1
                 ; 0000 00FB 
                 ; 0000 00FC 
                 ; 0000 00FD // External Interrupt(s) initialization
                 ; 0000 00FE // INT0: On
                 ; 0000 00FF // INT0 Mode: Rising Edge
                 ; 0000 0100 // INT1: On
                 ; 0000 0101 // INT1 Mode: Rising Edge
                 ; 0000 0102 // INT2: Off
                 ; 0000 0103 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
000161 b7eb      	IN   R30,0x3B
000162 6ce0      	ORI  R30,LOW(0xC0)
000163 bfeb      	OUT  0x3B,R30
                 ; 0000 0104 MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
000164 e0ef      	LDI  R30,LOW(15)
000165 bfe5      	OUT  0x35,R30
                 ; 0000 0105 MCUCSR=(0<<ISC2);
000166 e0e0      	LDI  R30,LOW(0)
000167 bfe4      	OUT  0x34,R30
                 ; 0000 0106 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
000168 ece0      	LDI  R30,LOW(192)
000169 bfea      	OUT  0x3A,R30
                 ; 0000 0107 
                 ; 0000 0108 // USART initialization
                 ; 0000 0109 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 010A // USART Receiver: On
                 ; 0000 010B // USART Transmitter: On
                 ; 0000 010C // USART Mode: Asynchronous
                 ; 0000 010D // USART Baud Rate: 9600 (Double Speed Mode)
                 ; 0000 010E UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (1<<U2X) | (0<<MPCM);
00016a e0e2      	LDI  R30,LOW(2)
00016b b9eb      	OUT  0xB,R30
                 ; 0000 010F UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00016c e9e8      	LDI  R30,LOW(152)
00016d b9ea      	OUT  0xA,R30
                 ; 0000 0110 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00016e e8e6      	LDI  R30,LOW(134)
00016f bde0      	OUT  0x20,R30
                 ; 0000 0111 UBRRH=0x00;
000170 e0e0      	LDI  R30,LOW(0)
000171 bde0      	OUT  0x20,R30
                 ; 0000 0112 UBRRL=0x0C;
000172 e0ec      	LDI  R30,LOW(12)
000173 b9e9      	OUT  0x9,R30
                 ; 0000 0113 
                 ; 0000 0114 // Alphanumeric LCD initialization
                 ; 0000 0115 // Connections are specified in the
                 ; 0000 0116 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0117 // RS - PORTC Bit 0
                 ; 0000 0118 // RD - PORTC Bit 1
                 ; 0000 0119 // EN - PORTC Bit 2
                 ; 0000 011A // D4 - PORTC Bit 4
                 ; 0000 011B // D5 - PORTC Bit 5
                 ; 0000 011C // D6 - PORTC Bit 6
                 ; 0000 011D // D7 - PORTC Bit 7
                 ; 0000 011E // Characters/line: 16
                 ; 0000 011F lcd_init(16);
000174 e1a0      	LDI  R26,LOW(16)
000175 d05d      	RCALL _lcd_init
                 ; 0000 0120 
                 ; 0000 0121 #asm("sei")
000176 9478      	sei
                 ; 0000 0122 
                 ; 0000 0123 
                 ; 0000 0124 while (1)
                 _0x33:
                 ; 0000 0125       {
                 ; 0000 0126         keyboard();
000177 df1e      	RCALL _keyboard
                 ; 0000 0127       }
000178 cffe      	RJMP _0x33
                 ; 0000 0128 }
                 _0x36:
000179 cfff      	RJMP _0x36
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00017a 93aa      	ST   -Y,R26
00017b b3e5      	IN   R30,0x15
00017c 70ef      	ANDI R30,LOW(0xF)
00017d 2fae      	MOV  R26,R30
00017e 81e8      	LD   R30,Y
00017f 7fe0      	ANDI R30,LOW(0xF0)
000180 2bea      	OR   R30,R26
000181 bbe5      	OUT  0x15,R30
                +
000182 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000183 958a     +DEC R24
000184 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000185 9aaa      	SBI  0x15,2
                +
000186 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000187 958a     +DEC R24
000188 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000189 98aa      	CBI  0x15,2
                +
00018a e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00018b 958a     +DEC R24
00018c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00018d 940c 0204 	JMP  _0x2080003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00018f 93aa      	ST   -Y,R26
000190 81a8      	LD   R26,Y
000191 dfe8      	RCALL __lcd_write_nibble_G100
000192 81e8          ld    r30,y
000193 95e2          swap  r30
000194 83e8          st    y,r30
000195 81a8      	LD   R26,Y
000196 dfe3      	RCALL __lcd_write_nibble_G100
                +
000197 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000198 958a     +DEC R24
000199 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00019a c069      	RJMP _0x2080003
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00019b 93aa      	ST   -Y,R26
00019c 81e8      	LD   R30,Y
00019d e0f0      	LDI  R31,0
00019e 56ea      	SUBI R30,LOW(-__base_y_G100)
00019f 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001a0 81e0      	LD   R30,Z
0001a1 81a9      	LDD  R26,Y+1
0001a2 0fae      	ADD  R26,R30
0001a3 dfeb      	RCALL __lcd_write_data
0001a4 80a9      	LDD  R10,Y+1
0001a5 80d8      	LDD  R13,Y+0
0001a6 9622      	ADIW R28,2
0001a7 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001a8 e0a2      	LDI  R26,LOW(2)
0001a9 940e 0401 	CALL SUBOPT_0x3
0001ab e0ac      	LDI  R26,LOW(12)
0001ac dfe2      	RCALL __lcd_write_data
0001ad e0a1      	LDI  R26,LOW(1)
0001ae 940e 0401 	CALL SUBOPT_0x3
0001b0 e0e0      	LDI  R30,LOW(0)
0001b1 2ede      	MOV  R13,R30
0001b2 2eae      	MOV  R10,R30
0001b3 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001b4 93aa      	ST   -Y,R26
0001b5 81a8      	LD   R26,Y
0001b6 30aa      	CPI  R26,LOW(0xA)
0001b7 f011      	BREQ _0x2000005
0001b8 14ac      	CP   R10,R12
0001b9 f048      	BRLO _0x2000004
                 _0x2000005:
0001ba e0e0      	LDI  R30,LOW(0)
0001bb 93ea      	ST   -Y,R30
0001bc 94d3      	INC  R13
0001bd 2dad      	MOV  R26,R13
0001be dfdc      	RCALL _lcd_gotoxy
0001bf 81a8      	LD   R26,Y
0001c0 30aa      	CPI  R26,LOW(0xA)
0001c1 f409      	BRNE _0x2000007
0001c2 c041      	RJMP _0x2080003
                 _0x2000007:
                 _0x2000004:
0001c3 94a3      	INC  R10
0001c4 9aa8      	SBI  0x15,0
0001c5 81a8      	LD   R26,Y
0001c6 dfc8      	RCALL __lcd_write_data
0001c7 98a8      	CBI  0x15,0
0001c8 c03b      	RJMP _0x2080003
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001c9 93ba      	ST   -Y,R27
0001ca 93aa      	ST   -Y,R26
0001cb 931a      	ST   -Y,R17
                 _0x2000008:
0001cc 940e 0407 	CALL SUBOPT_0x4
0001ce f019      	BREQ _0x200000A
0001cf 2fa1      	MOV  R26,R17
0001d0 dfe3      	RCALL _lcd_putchar
0001d1 cffa      	RJMP _0x2000008
                 _0x200000A:
0001d2 c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001d3 93aa      	ST   -Y,R26
0001d4 b3e4      	IN   R30,0x14
0001d5 6fe0      	ORI  R30,LOW(0xF0)
0001d6 bbe4      	OUT  0x14,R30
0001d7 9aa2      	SBI  0x14,2
0001d8 9aa0      	SBI  0x14,0
0001d9 9aa1      	SBI  0x14,1
0001da 98aa      	CBI  0x15,2
0001db 98a8      	CBI  0x15,0
0001dc 98a9      	CBI  0x15,1
0001dd 80c8      	LDD  R12,Y+0
0001de 81e8      	LD   R30,Y
0001df 58e0      	SUBI R30,-LOW(128)
                +
0001e0 93e0 0198+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001e2 81e8      	LD   R30,Y
0001e3 54e0      	SUBI R30,-LOW(192)
                +
0001e4 93e0 0199+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001e6 e1a4      	LDI  R26,LOW(20)
0001e7 e0b0      	LDI  R27,0
0001e8 940e 0442 	CALL _delay_ms
0001ea 940e 040f 	CALL SUBOPT_0x5
0001ec 940e 040f 	CALL SUBOPT_0x5
0001ee 940e 040f 	CALL SUBOPT_0x5
0001f0 e2a0      	LDI  R26,LOW(32)
0001f1 df88      	RCALL __lcd_write_nibble_G100
                +
0001f2 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001f3 958a     +DEC R24
0001f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001f5 e2a8      	LDI  R26,LOW(40)
0001f6 df98      	RCALL __lcd_write_data
0001f7 e0a4      	LDI  R26,LOW(4)
0001f8 df96      	RCALL __lcd_write_data
0001f9 e8a5      	LDI  R26,LOW(133)
0001fa df94      	RCALL __lcd_write_data
0001fb e0a6      	LDI  R26,LOW(6)
0001fc df92      	RCALL __lcd_write_data
0001fd dfaa      	RCALL _lcd_clear
0001fe c005      	RJMP _0x2080003
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0001ff 93aa      	ST   -Y,R26
                 putchar0:
000200 9b5d           sbis usr,udre
000201 cffe           rjmp putchar0
000202 81e8           ld   r30,y
000203 b9ec           out  udr,r30
                 _0x2080003:
000204 9621      	ADIW R28,1
000205 9508      	RET
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
000206 93ba      	ST   -Y,R27
000207 93aa      	ST   -Y,R26
000208 931a      	ST   -Y,R17
                 _0x2020003:
000209 940e 0407 	CALL SUBOPT_0x4
00020b f019      	BREQ _0x2020005
00020c 2fa1      	MOV  R26,R17
00020d dff1      	RCALL _putchar
00020e cffa      	RJMP _0x2020003
                 _0x2020005:
00020f e0aa      	LDI  R26,LOW(10)
000210 dfee      	RCALL _putchar
                 _0x2080002:
000211 8118      	LDD  R17,Y+0
000212 9623      	ADIW R28,3
000213 9508      	RET
                 ; .FEND
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000214 93ba      	ST   -Y,R27
000215 93aa      	ST   -Y,R26
000216 931a      	ST   -Y,R17
000217 930a      	ST   -Y,R16
000218 81aa      	LDD  R26,Y+2
000219 81bb      	LDD  R27,Y+2+1
00021a 9612      	ADIW R26,2
00021b 940e 0474 	CALL __GETW1P
00021d 9730      	SBIW R30,0
00021e f159      	BREQ _0x2020010
00021f 81aa      	LDD  R26,Y+2
000220 81bb      	LDD  R27,Y+2+1
000221 9614      	ADIW R26,4
000222 940e 0474 	CALL __GETW1P
000224 018f      	MOVW R16,R30
000225 9730      	SBIW R30,0
000226 f061      	BREQ _0x2020012
                +
000227 3002     +CPI R16 , LOW ( 2 )
000228 e0e0     +LDI R30 , HIGH ( 2 )
000229 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00022a f098      	BRLO _0x2020013
00022b 01f8      	MOVW R30,R16
00022c 9731      	SBIW R30,1
00022d 018f      	MOVW R16,R30
                +
00022e 81aa     +LDD R26 , Y + 2
00022f 81bb     +LDD R27 , Y + 2 + 1
000230 9614     +ADIW R26 , 4
000231 93ed     +ST X + , R30
000232 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000233 81aa      	LDD  R26,Y+2
000234 81bb      	LDD  R27,Y+2+1
000235 9612      	ADIW R26,2
000236 91ed      	LD   R30,X+
000237 91fd      	LD   R31,X+
000238 9631      	ADIW R30,1
000239 93fe      	ST   -X,R31
00023a 93ee      	ST   -X,R30
00023b 9731      	SBIW R30,1
00023c 81ac      	LDD  R26,Y+4
00023d 83a0      	STD  Z+0,R26
                 _0x2020013:
00023e 81aa      	LDD  R26,Y+2
00023f 81bb      	LDD  R27,Y+2+1
000240 940e 0474 	CALL __GETW1P
000242 23ff      	TST  R31
000243 f02a      	BRMI _0x2020014
000244 91ed      	LD   R30,X+
000245 91fd      	LD   R31,X+
000246 9631      	ADIW R30,1
000247 93fe      	ST   -X,R31
000248 93ee      	ST   -X,R30
                 _0x2020014:
000249 c006      	RJMP _0x2020015
                 _0x2020010:
00024a 81aa      	LDD  R26,Y+2
00024b 81bb      	LDD  R27,Y+2+1
00024c efef      	LDI  R30,LOW(65535)
00024d efff      	LDI  R31,HIGH(65535)
00024e 93ed      	ST   X+,R30
00024f 93fc      	ST   X,R31
                 _0x2020015:
000250 8119      	LDD  R17,Y+1
000251 8108      	LDD  R16,Y+0
000252 9625      	ADIW R28,5
000253 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000254 93ba      	ST   -Y,R27
000255 93aa      	ST   -Y,R26
000256 9726      	SBIW R28,6
000257 940e 0481 	CALL __SAVELOCR6
000259 e010      	LDI  R17,0
00025a 85ac      	LDD  R26,Y+12
00025b 85bd      	LDD  R27,Y+12+1
00025c e0e0      	LDI  R30,LOW(0)
00025d e0f0      	LDI  R31,HIGH(0)
00025e 93ed      	ST   X+,R30
00025f 93fc      	ST   X,R31
                 _0x2020016:
000260 89ea      	LDD  R30,Y+18
000261 89fb      	LDD  R31,Y+18+1
000262 9631      	ADIW R30,1
000263 8bea      	STD  Y+18,R30
000264 8bfb      	STD  Y+18+1,R31
000265 9731      	SBIW R30,1
000266 91e4      	LPM  R30,Z
000267 2f2e      	MOV  R18,R30
000268 30e0      	CPI  R30,0
000269 f409      	BRNE PC+2
00026a c115      	RJMP _0x2020018
00026b 2fe1      	MOV  R30,R17
00026c 30e0      	CPI  R30,0
00026d f439      	BRNE _0x202001C
00026e 3225      	CPI  R18,37
00026f f411      	BRNE _0x202001D
000270 e011      	LDI  R17,LOW(1)
000271 c002      	RJMP _0x202001E
                 _0x202001D:
000272 940e 0416 	CALL SUBOPT_0x6
                 _0x202001E:
000274 c10a      	RJMP _0x202001B
                 _0x202001C:
000275 30e1      	CPI  R30,LOW(0x1)
000276 f4a9      	BRNE _0x202001F
000277 3225      	CPI  R18,37
000278 f419      	BRNE _0x2020020
000279 940e 0416 	CALL SUBOPT_0x6
00027b c102      	RJMP _0x20200CC
                 _0x2020020:
00027c e012      	LDI  R17,LOW(2)
00027d e040      	LDI  R20,LOW(0)
00027e e000      	LDI  R16,LOW(0)
00027f 322d      	CPI  R18,45
000280 f411      	BRNE _0x2020021
000281 e001      	LDI  R16,LOW(1)
000282 c0fc      	RJMP _0x202001B
                 _0x2020021:
000283 322b      	CPI  R18,43
000284 f411      	BRNE _0x2020022
000285 e24b      	LDI  R20,LOW(43)
000286 c0f8      	RJMP _0x202001B
                 _0x2020022:
000287 3220      	CPI  R18,32
000288 f411      	BRNE _0x2020023
000289 e240      	LDI  R20,LOW(32)
00028a c0f4      	RJMP _0x202001B
                 _0x2020023:
00028b c002      	RJMP _0x2020024
                 _0x202001F:
00028c 30e2      	CPI  R30,LOW(0x2)
00028d f439      	BRNE _0x2020025
                 _0x2020024:
00028e e050      	LDI  R21,LOW(0)
00028f e013      	LDI  R17,LOW(3)
000290 3320      	CPI  R18,48
000291 f411      	BRNE _0x2020026
000292 6800      	ORI  R16,LOW(128)
000293 c0eb      	RJMP _0x202001B
                 _0x2020026:
000294 c003      	RJMP _0x2020027
                 _0x2020025:
000295 30e3      	CPI  R30,LOW(0x3)
000296 f009      	BREQ PC+2
000297 c0e7      	RJMP _0x202001B
                 _0x2020027:
000298 3320      	CPI  R18,48
000299 f010      	BRLO _0x202002A
00029a 332a      	CPI  R18,58
00029b f008      	BRLO _0x202002B
                 _0x202002A:
00029c c007      	RJMP _0x2020029
                 _0x202002B:
00029d e0aa      	LDI  R26,LOW(10)
00029e 9f5a      	MUL  R21,R26
00029f 2d50      	MOV  R21,R0
0002a0 2fe2      	MOV  R30,R18
0002a1 53e0      	SUBI R30,LOW(48)
0002a2 0f5e      	ADD  R21,R30
0002a3 c0db      	RJMP _0x202001B
                 _0x2020029:
0002a4 2fe2      	MOV  R30,R18
0002a5 36e3      	CPI  R30,LOW(0x63)
0002a6 f449      	BRNE _0x202002F
0002a7 940e 041d 	CALL SUBOPT_0x7
0002a9 89e8      	LDD  R30,Y+16
0002aa 89f9      	LDD  R31,Y+16+1
0002ab 81a4      	LDD  R26,Z+4
0002ac 93aa      	ST   -Y,R26
0002ad 940e 0423 	CALL SUBOPT_0x8
0002af c0ce      	RJMP _0x2020030
                 _0x202002F:
0002b0 37e3      	CPI  R30,LOW(0x73)
0002b1 f441      	BRNE _0x2020032
0002b2 940e 041d 	CALL SUBOPT_0x7
0002b4 940e 0429 	CALL SUBOPT_0x9
0002b6 940e 03bc 	CALL _strlen
0002b8 2f1e      	MOV  R17,R30
0002b9 c00a      	RJMP _0x2020033
                 _0x2020032:
0002ba 37e0      	CPI  R30,LOW(0x70)
0002bb f461      	BRNE _0x2020035
0002bc 940e 041d 	CALL SUBOPT_0x7
0002be 940e 0429 	CALL SUBOPT_0x9
0002c0 940e 03c8 	CALL _strlenf
0002c2 2f1e      	MOV  R17,R30
0002c3 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002c4 6002      	ORI  R16,LOW(2)
0002c5 770f      	ANDI R16,LOW(127)
0002c6 e030      	LDI  R19,LOW(0)
0002c7 c034      	RJMP _0x2020036
                 _0x2020035:
0002c8 36e4      	CPI  R30,LOW(0x64)
0002c9 f011      	BREQ _0x2020039
0002ca 36e9      	CPI  R30,LOW(0x69)
0002cb f411      	BRNE _0x202003A
                 _0x2020039:
0002cc 6004      	ORI  R16,LOW(4)
0002cd c002      	RJMP _0x202003B
                 _0x202003A:
0002ce 37e5      	CPI  R30,LOW(0x75)
0002cf f431      	BRNE _0x202003C
                 _0x202003B:
0002d0 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002d1 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002d2 83ee      	STD  Y+6,R30
0002d3 83ff      	STD  Y+6+1,R31
0002d4 e015      	LDI  R17,LOW(5)
0002d5 c00c      	RJMP _0x202003D
                 _0x202003C:
0002d6 35e8      	CPI  R30,LOW(0x58)
0002d7 f411      	BRNE _0x202003F
0002d8 6008      	ORI  R16,LOW(8)
0002d9 c003      	RJMP _0x2020040
                 _0x202003F:
0002da 37e8      	CPI  R30,LOW(0x78)
0002db f009      	BREQ PC+2
0002dc c0a1      	RJMP _0x2020071
                 _0x2020040:
0002dd e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002de e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002df 83ee      	STD  Y+6,R30
0002e0 83ff      	STD  Y+6+1,R31
0002e1 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002e2 ff02      	SBRS R16,2
0002e3 c014      	RJMP _0x2020042
0002e4 940e 041d 	CALL SUBOPT_0x7
0002e6 940e 0433 	CALL SUBOPT_0xA
0002e8 85ab      	LDD  R26,Y+11
0002e9 23aa      	TST  R26
0002ea f43a      	BRPL _0x2020043
0002eb 85ea      	LDD  R30,Y+10
0002ec 85fb      	LDD  R31,Y+10+1
0002ed 940e 0450 	CALL __ANEGW1
0002ef 87ea      	STD  Y+10,R30
0002f0 87fb      	STD  Y+10+1,R31
0002f1 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002f2 3040      	CPI  R20,0
0002f3 f011      	BREQ _0x2020044
0002f4 5f1f      	SUBI R17,-LOW(1)
0002f5 c001      	RJMP _0x2020045
                 _0x2020044:
0002f6 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002f7 c004      	RJMP _0x2020046
                 _0x2020042:
0002f8 940e 041d 	CALL SUBOPT_0x7
0002fa 940e 0433 	CALL SUBOPT_0xA
                 _0x2020046:
                 _0x2020036:
0002fc fd00      	SBRC R16,0
0002fd c011      	RJMP _0x2020047
                 _0x2020048:
0002fe 1715      	CP   R17,R21
0002ff f478      	BRSH _0x202004A
000300 ff07      	SBRS R16,7
000301 c008      	RJMP _0x202004B
000302 ff02      	SBRS R16,2
000303 c004      	RJMP _0x202004C
000304 7f0b      	ANDI R16,LOW(251)
000305 2f24      	MOV  R18,R20
000306 5011      	SUBI R17,LOW(1)
000307 c001      	RJMP _0x202004D
                 _0x202004C:
000308 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000309 c001      	RJMP _0x202004E
                 _0x202004B:
00030a e220      	LDI  R18,LOW(32)
                 _0x202004E:
00030b 940e 0416 	CALL SUBOPT_0x6
00030d 5051      	SUBI R21,LOW(1)
00030e cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00030f 2f31      	MOV  R19,R17
000310 ff01      	SBRS R16,1
000311 c017      	RJMP _0x202004F
                 _0x2020050:
000312 3030      	CPI  R19,0
000313 f0a1      	BREQ _0x2020052
000314 ff03      	SBRS R16,3
000315 c006      	RJMP _0x2020053
000316 81ee      	LDD  R30,Y+6
000317 81ff      	LDD  R31,Y+6+1
000318 9125      	LPM  R18,Z+
000319 83ee      	STD  Y+6,R30
00031a 83ff      	STD  Y+6+1,R31
00031b c005      	RJMP _0x2020054
                 _0x2020053:
00031c 81ae      	LDD  R26,Y+6
00031d 81bf      	LDD  R27,Y+6+1
00031e 912d      	LD   R18,X+
00031f 83ae      	STD  Y+6,R26
000320 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000321 940e 0416 	CALL SUBOPT_0x6
000323 3050      	CPI  R21,0
000324 f009      	BREQ _0x2020055
000325 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000326 5031      	SUBI R19,LOW(1)
000327 cfea      	RJMP _0x2020050
                 _0x2020052:
000328 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000329 e320      	LDI  R18,LOW(48)
00032a 81ee      	LDD  R30,Y+6
00032b 81ff      	LDD  R31,Y+6+1
00032c 940e 0478 	CALL __GETW1PF
00032e 87e8      	STD  Y+8,R30
00032f 87f9      	STD  Y+8+1,R31
000330 81ee      	LDD  R30,Y+6
000331 81ff      	LDD  R31,Y+6+1
000332 9632      	ADIW R30,2
000333 83ee      	STD  Y+6,R30
000334 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000335 85e8      	LDD  R30,Y+8
000336 85f9      	LDD  R31,Y+8+1
000337 85aa      	LDD  R26,Y+10
000338 85bb      	LDD  R27,Y+10+1
000339 17ae      	CP   R26,R30
00033a 07bf      	CPC  R27,R31
00033b f050      	BRLO _0x202005C
00033c 5f2f      	SUBI R18,-LOW(1)
00033d 85a8      	LDD  R26,Y+8
00033e 85b9      	LDD  R27,Y+8+1
00033f 85ea      	LDD  R30,Y+10
000340 85fb      	LDD  R31,Y+10+1
000341 1bea      	SUB  R30,R26
000342 0bfb      	SBC  R31,R27
000343 87ea      	STD  Y+10,R30
000344 87fb      	STD  Y+10+1,R31
000345 cfef      	RJMP _0x202005A
                 _0x202005C:
000346 332a      	CPI  R18,58
000347 f028      	BRLO _0x202005D
000348 ff03      	SBRS R16,3
000349 c002      	RJMP _0x202005E
00034a 5f29      	SUBI R18,-LOW(7)
00034b c001      	RJMP _0x202005F
                 _0x202005E:
00034c 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00034d fd04      	SBRC R16,4
00034e c01a      	RJMP _0x2020061
00034f 3321      	CPI  R18,49
000350 f420      	BRSH _0x2020063
000351 85a8      	LDD  R26,Y+8
000352 85b9      	LDD  R27,Y+8+1
000353 9711      	SBIW R26,1
000354 f409      	BRNE _0x2020062
                 _0x2020063:
000355 c009      	RJMP _0x20200CD
                 _0x2020062:
000356 1753      	CP   R21,R19
000357 f010      	BRLO _0x2020067
000358 ff00      	SBRS R16,0
000359 c001      	RJMP _0x2020068
                 _0x2020067:
00035a c013      	RJMP _0x2020066
                 _0x2020068:
00035b e220      	LDI  R18,LOW(32)
00035c ff07      	SBRS R16,7
00035d c00b      	RJMP _0x2020069
00035e e320      	LDI  R18,LOW(48)
                 _0x20200CD:
00035f 6100      	ORI  R16,LOW(16)
000360 ff02      	SBRS R16,2
000361 c007      	RJMP _0x202006A
000362 7f0b      	ANDI R16,LOW(251)
000363 934a      	ST   -Y,R20
000364 940e 0423 	CALL SUBOPT_0x8
000366 3050      	CPI  R21,0
000367 f009      	BREQ _0x202006B
000368 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000369 940e 0416 	CALL SUBOPT_0x6
00036b 3050      	CPI  R21,0
00036c f009      	BREQ _0x202006C
00036d 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
00036e 5031      	SUBI R19,LOW(1)
00036f 85a8      	LDD  R26,Y+8
000370 85b9      	LDD  R27,Y+8+1
000371 9712      	SBIW R26,2
000372 f008      	BRLO _0x2020059
000373 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000374 ff00      	SBRS R16,0
000375 c008      	RJMP _0x202006D
                 _0x202006E:
000376 3050      	CPI  R21,0
000377 f031      	BREQ _0x2020070
000378 5051      	SUBI R21,LOW(1)
000379 e2e0      	LDI  R30,LOW(32)
00037a 93ea      	ST   -Y,R30
00037b 940e 0423 	CALL SUBOPT_0x8
00037d cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00037e e010      	LDI  R17,LOW(0)
                 _0x202001B:
00037f cee0      	RJMP _0x2020016
                 _0x2020018:
000380 85ac      	LDD  R26,Y+12
000381 85bd      	LDD  R27,Y+12+1
000382 940e 0474 	CALL __GETW1P
000384 940e 0488 	CALL __LOADLOCR6
000386 9664      	ADIW R28,20
000387 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000388 92ff      	PUSH R15
000389 2ef8      	MOV  R15,R24
00038a 9726      	SBIW R28,6
00038b 940e 0483 	CALL __SAVELOCR4
00038d 940e 043b 	CALL SUBOPT_0xB
00038f 9730      	SBIW R30,0
000390 f419      	BRNE _0x2020072
000391 efef      	LDI  R30,LOW(65535)
000392 efff      	LDI  R31,HIGH(65535)
000393 c023      	RJMP _0x2080001
                 _0x2020072:
000394 01de      	MOVW R26,R28
000395 9616      	ADIW R26,6
000396 940e 044c 	CALL __ADDW2R15
000398 018d      	MOVW R16,R26
000399 940e 043b 	CALL SUBOPT_0xB
00039b 83ee      	STD  Y+6,R30
00039c 83ff      	STD  Y+6+1,R31
00039d e0e0      	LDI  R30,LOW(0)
00039e 87e8      	STD  Y+8,R30
00039f 87e9      	STD  Y+8+1,R30
0003a0 01de      	MOVW R26,R28
0003a1 961a      	ADIW R26,10
0003a2 940e 044c 	CALL __ADDW2R15
0003a4 940e 0474 	CALL __GETW1P
0003a6 93fa      	ST   -Y,R31
0003a7 93ea      	ST   -Y,R30
0003a8 931a      	ST   -Y,R17
0003a9 930a      	ST   -Y,R16
0003aa e1e4      	LDI  R30,LOW(_put_buff_G101)
0003ab e0f2      	LDI  R31,HIGH(_put_buff_G101)
0003ac 93fa      	ST   -Y,R31
0003ad 93ea      	ST   -Y,R30
0003ae 01de      	MOVW R26,R28
0003af 961a      	ADIW R26,10
0003b0 dea3      	RCALL __print_G101
0003b1 019f      	MOVW R18,R30
0003b2 81ae      	LDD  R26,Y+6
0003b3 81bf      	LDD  R27,Y+6+1
0003b4 e0e0      	LDI  R30,LOW(0)
0003b5 93ec      	ST   X,R30
0003b6 01f9      	MOVW R30,R18
                 _0x2080001:
0003b7 940e 048a 	CALL __LOADLOCR4
0003b9 962a      	ADIW R28,10
0003ba 90ff      	POP  R15
0003bb 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003bc 93ba      	ST   -Y,R27
0003bd 93aa      	ST   -Y,R26
0003be 91a9          ld   r26,y+
0003bf 91b9          ld   r27,y+
0003c0 27ee          clr  r30
0003c1 27ff          clr  r31
                 strlen0:
0003c2 916d          ld   r22,x+
0003c3 2366          tst  r22
0003c4 f011          breq strlen1
0003c5 9631          adiw r30,1
0003c6 cffb          rjmp strlen0
                 strlen1:
0003c7 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003c8 93ba      	ST   -Y,R27
0003c9 93aa      	ST   -Y,R26
0003ca 27aa          clr  r26
0003cb 27bb          clr  r27
0003cc 91e9          ld   r30,y+
0003cd 91f9          ld   r31,y+
                 strlenf0:
0003ce 9005      	lpm  r0,z+
0003cf 2000          tst  r0
0003d0 f011          breq strlenf1
0003d1 9611          adiw r26,1
0003d2 cffb          rjmp strlenf0
                 strlenf1:
0003d3 01fd          movw r30,r26
0003d4 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _str:
000177           	.BYTE 0x10
                 _rx_buffer:
000187           	.BYTE 0xF
                 __base_y_G100:
000196           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x0:
0003d5 e0e0      	LDI  R30,LOW(0)
0003d6 93ea      	ST   -Y,R30
0003d7 e0a0      	LDI  R26,LOW(0)
0003d8 940e 019b 	CALL _lcd_gotoxy
0003da e7e7      	LDI  R30,LOW(_str)
0003db e0f1      	LDI  R31,HIGH(_str)
0003dc 93fa      	ST   -Y,R31
0003dd 93ea      	ST   -Y,R30
                +
0003de e6ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0003df e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0003e0 93fa      	ST   -Y,R31
0003e1 93ea      	ST   -Y,R30
0003e2 01f3      	MOVW R30,R6
0003e3 940e 0454 	CALL __CWD1
0003e5 940e 047c 	CALL __PUTPARD1
0003e7 e084      	LDI  R24,4
0003e8 940e 0388 	CALL _sprintf
0003ea 9628      	ADIW R28,8
0003eb e7a7      	LDI  R26,LOW(_str)
0003ec e0b1      	LDI  R27,HIGH(_str)
0003ed 940c 01c9 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
0003ef e3a2      	LDI  R26,LOW(50)
0003f0 e0b0      	LDI  R27,0
0003f1 940c 0442 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x2:
0003f3 920a      	ST   -Y,R0
0003f4 921a      	ST   -Y,R1
0003f5 92fa      	ST   -Y,R15
0003f6 936a      	ST   -Y,R22
0003f7 937a      	ST   -Y,R23
0003f8 938a      	ST   -Y,R24
0003f9 939a      	ST   -Y,R25
0003fa 93aa      	ST   -Y,R26
0003fb 93ba      	ST   -Y,R27
0003fc 93ea      	ST   -Y,R30
0003fd 93fa      	ST   -Y,R31
0003fe b7ef      	IN   R30,SREG
0003ff 93ea      	ST   -Y,R30
000400 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000401 940e 018f 	CALL __lcd_write_data
000403 e0a3      	LDI  R26,LOW(3)
000404 e0b0      	LDI  R27,0
000405 940c 0442 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000407 81a9      	LDD  R26,Y+1
000408 81ba      	LDD  R27,Y+1+1
000409 91ed      	LD   R30,X+
00040a 83a9      	STD  Y+1,R26
00040b 83ba      	STD  Y+1+1,R27
00040c 2f1e      	MOV  R17,R30
00040d 30e0      	CPI  R30,0
00040e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
00040f e3a0      	LDI  R26,LOW(48)
000410 940e 017a 	CALL __lcd_write_nibble_G100
                +
000412 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000413 958a     +DEC R24
000414 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000415 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
000416 932a      	ST   -Y,R18
000417 85ad      	LDD  R26,Y+13
000418 85be      	LDD  R27,Y+13+1
000419 85ef      	LDD  R30,Y+15
00041a 89f8      	LDD  R31,Y+15+1
00041b 9509      	ICALL
00041c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
00041d 89e8      	LDD  R30,Y+16
00041e 89f9      	LDD  R31,Y+16+1
00041f 9734      	SBIW R30,4
000420 8be8      	STD  Y+16,R30
000421 8bf9      	STD  Y+16+1,R31
000422 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000423 85ad      	LDD  R26,Y+13
000424 85be      	LDD  R27,Y+13+1
000425 85ef      	LDD  R30,Y+15
000426 89f8      	LDD  R31,Y+15+1
000427 9509      	ICALL
000428 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
000429 89a8      	LDD  R26,Y+16
00042a 89b9      	LDD  R27,Y+16+1
00042b 9614      	ADIW R26,4
00042c 940e 0474 	CALL __GETW1P
00042e 83ee      	STD  Y+6,R30
00042f 83ff      	STD  Y+6+1,R31
000430 81ae      	LDD  R26,Y+6
000431 81bf      	LDD  R27,Y+6+1
000432 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000433 89a8      	LDD  R26,Y+16
000434 89b9      	LDD  R27,Y+16+1
000435 9614      	ADIW R26,4
000436 940e 0474 	CALL __GETW1P
000438 87ea      	STD  Y+10,R30
000439 87fb      	STD  Y+10+1,R31
00043a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00043b 01de      	MOVW R26,R28
00043c 961c      	ADIW R26,12
00043d 940e 044c 	CALL __ADDW2R15
00043f 940e 0474 	CALL __GETW1P
000441 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000442 9610      	adiw r26,0
000443 f039      	breq __delay_ms1
                 __delay_ms0:
000444 95a8      	wdr
                +
000445 ef8a     +LDI R24 , LOW ( 0xFA )
000446 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000447 9701     +SBIW R24 , 1
000448 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000449 9711      	sbiw r26,1
00044a f7c9      	brne __delay_ms0
                 __delay_ms1:
00044b 9508      	ret
                 
                 __ADDW2R15:
00044c 2400      	CLR  R0
00044d 0daf      	ADD  R26,R15
00044e 1db0      	ADC  R27,R0
00044f 9508      	RET
                 
                 __ANEGW1:
000450 95f1      	NEG  R31
000451 95e1      	NEG  R30
000452 40f0      	SBCI R31,0
000453 9508      	RET
                 
                 __CWD1:
000454 2f6f      	MOV  R22,R31
000455 0f66      	ADD  R22,R22
000456 0b66      	SBC  R22,R22
000457 2f76      	MOV  R23,R22
000458 9508      	RET
                 
                 __MULW12U:
000459 9ffa      	MUL  R31,R26
00045a 2df0      	MOV  R31,R0
00045b 9feb      	MUL  R30,R27
00045c 0df0      	ADD  R31,R0
00045d 9fea      	MUL  R30,R26
00045e 2de0      	MOV  R30,R0
00045f 0df1      	ADD  R31,R1
000460 9508      	RET
                 
                 __MULW12:
000461 d004      	RCALL __CHKSIGNW
000462 dff6      	RCALL __MULW12U
000463 f40e      	BRTC __MULW121
000464 dfeb      	RCALL __ANEGW1
                 __MULW121:
000465 9508      	RET
                 
                 __CHKSIGNW:
000466 94e8      	CLT
000467 fff7      	SBRS R31,7
000468 c002      	RJMP __CHKSW1
000469 dfe6      	RCALL __ANEGW1
00046a 9468      	SET
                 __CHKSW1:
00046b ffb7      	SBRS R27,7
00046c c006      	RJMP __CHKSW2
00046d 95a0      	COM  R26
00046e 95b0      	COM  R27
00046f 9611      	ADIW R26,1
000470 f800      	BLD  R0,0
000471 9403      	INC  R0
000472 fa00      	BST  R0,0
                 __CHKSW2:
000473 9508      	RET
                 
                 __GETW1P:
000474 91ed      	LD   R30,X+
000475 91fc      	LD   R31,X
000476 9711      	SBIW R26,1
000477 9508      	RET
                 
                 __GETW1PF:
000478 9005      	LPM  R0,Z+
000479 91f4      	LPM  R31,Z
00047a 2de0      	MOV  R30,R0
00047b 9508      	RET
                 
                 __PUTPARD1:
00047c 937a      	ST   -Y,R23
00047d 936a      	ST   -Y,R22
00047e 93fa      	ST   -Y,R31
00047f 93ea      	ST   -Y,R30
000480 9508      	RET
                 
                 __SAVELOCR6:
000481 935a      	ST   -Y,R21
                 __SAVELOCR5:
000482 934a      	ST   -Y,R20
                 __SAVELOCR4:
000483 933a      	ST   -Y,R19
                 __SAVELOCR3:
000484 932a      	ST   -Y,R18
                 __SAVELOCR2:
000485 931a      	ST   -Y,R17
000486 930a      	ST   -Y,R16
000487 9508      	RET
                 
                 __LOADLOCR6:
000488 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000489 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00048a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00048b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00048c 8119      	LDD  R17,Y+1
00048d 8108      	LD   R16,Y
00048e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  19 r1 :   4 r2 :  13 r3 :   0 r4 :  11 r5 :   2 r6 :   6 r7 :   3 
r8 :   4 r9 :   0 r10:   4 r11:   3 r12:   2 r13:   4 r14:   0 r15:   6 
r16:  39 r17:  30 r18:  29 r19:   8 r20:   9 r21:  17 r22:  13 r23:   4 
r24:  25 r25:   5 r26: 118 r27:  51 r28:  14 r29:   1 r30: 214 r31:  77 
x  :  23 y  : 201 z  :  16 
Registers used: 32 out of 35 (91.4%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   7 
adiw  :  25 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :  13 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  34 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  70 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   2 
cp    :   6 cpc   :   2 cpi   :  34 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   5 jmp   :  26 ld    :  40 ldd   :  77 ldi   : 136 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  24 movw  :  26 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  21 pop   :   1 push  :   1 rcall :  35 ret   :  32 
reti  :   1 rjmp  :  77 rol   :   0 ror   :   0 sbc   :   2 sbci  :   3 
sbi   :  15 sbic  :  10 sbis  :   1 sbiw  :  17 sbr   :   0 sbrc  :   2 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :  12 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  80 std   :  31 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 62 out of 116 (53.4%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00091e   2240     94   2334   16384  14.2%
[.dseg] 0x000060 0x00019a      0     58     58    1024   5.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
