;/*******************************************************
;Project : Send and receive two-way radio message(NAVA)
;Version : 1.01
;Date    : 12/25/2023
;Author  : Arshia Madadi
;Company : SCU - University
;Comments:
;
;
;Chip type               : ATmega16A
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <stdio.h>
;PCODE: $0000000D VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $0000000E VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $0000000F VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000010 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000011 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000012 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000013 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000014 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000015 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000016 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000017 VOL: 0
	#endif
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;#include <delay.h>
;
;//Paye hay KeyPad
;//Pin Keypad
;
;#define   ROW1   PORTB.3
;#define   ROW2   PORTB.4
;#define   ROW3   PORTB.5
;#define   ROW4   PORTB.6
;#define   C1     PINB.0
;#define   C2     PINB.1
;#define   C3     PINB.2
;
;unsigned char str[16];
;int num  , number ;
;bit p ; //  as pressed
;
;    //Code Keypad
;
;void show()
; 0000 0029 {

	.CSEG
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002A     if(p == 1)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002B     {
; 0000 002C         p = 0 ;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002D         number = (number * 10) + num ;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002E         lcd_clear();
;PCODE: $00000027 VOL: 0
; 0000 002F         lcd_gotoxy(0,0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0030         sprintf(str,"number = %4d",number);   //DAST BE NAMBER NAZAN KHARAB MISHE
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0031         lcd_puts(str);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0032     }
; 0000 0033 }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;void keyboard()
; 0000 0035     {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0036     ROW1 = 0 ;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0037     delay_ms(50);   // in normal we use 2ms but proteus can not detect
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0038         if(C1==0) num = 1 ,  p = 1  ;   // P AS PRESSED
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0039         if(C2==0) num = 2  , p = 1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 003A         if(C3==0) num = 3  , p = 1  ;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003B     delay_ms(50);   // in normal we use 2ms but proteus can not detect
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 003C     ROW1 = 1 ;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 003D 
; 0000 003E     show();
;PCODE: $00000064 VOL: 0
; 0000 003F 
; 0000 0040     ROW2 = 0 ;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0041     delay_ms(50);   // in normal we use 2ms but proteus can not detect
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0042         if(C1==0) num = 4  , p = 1 ;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0043         if(C2==0) num = 5  , p = 1 ;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0044         if(C3==0) num = 6  , p = 1 ;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0045     delay_ms(50);   // in normal we use 2ms but proteus can not detect
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0046     ROW2 = 1 ;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0047 
; 0000 0048     show();
;PCODE: $0000008A VOL: 0
; 0000 0049 
; 0000 004A     ROW3 = 0 ;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 004B     delay_ms(50);   // in normal we use 2ms but proteus can not detect
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004C         if(C1==0) num = 7 , p = 1 ;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 004D         if(C2==0) num = 8 , p = 1;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 004E         if(C3==0) num = 9 , p = 1  ;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 004F     delay_ms(50);   // in normal we use 2ms but proteus can not detect
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0050     ROW3 = 1 ;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0051 
; 0000 0052     show();
;PCODE: $000000B0 VOL: 0
; 0000 0053 
; 0000 0054     ROW4 = 0 ;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0055     delay_ms(50);   // in normal we use 2ms but proteus can not detect
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0056         if(C2==0) num = 0  , p = 1 ;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0057     delay_ms(50);   // in normal we use 2ms but proteus can not detect
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0058     ROW4 = 1 ;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0059 
; 0000 005A     show();
;PCODE: $000000C3 VOL: 0
; 0000 005B 
; 0000 005C     }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;
;
;// Interrupt Khareji 0
;//External Interrupt 0
;
;//  Baray pak kardan LCD
;//For Clear LCD
;
;
;interrupt [EXT_INT0] void ext_int0_isr(void) // clear mode
; 0000 0067 {
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0068         number = 0 ;
;PCODE: $000000C8 VOL: 0
; 0000 0069         lcd_clear();
;PCODE: $000000C9 VOL: 0
; 0000 006A                         //Sefr kardan Number
; 0000 006B                         //pak kardan LCD
; 0000 006C                         //Zeroing the number and clearing the LCD
; 0000 006D         putchar('&');
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 006E                         //Ersal &
; 0000 006F                         //Send &
; 0000 0070                        //ba didan &,LCD pak mishe (Khat = )
; 0000 0071                       //By seeing & and the LCD is cleared (Line = )
; 0000 0072         lcd_gotoxy(0,0);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0073         sprintf(str,"number = %4d",number);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0074         lcd_puts(str);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0075 
; 0000 0076 }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;            //Interrupt Khareji 1
;            //External Interrupt 1
;            //Ersal Payam
;            //Send Massage
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 007C {
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 007D         puts(str);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 007E         //araye marbot be STR ra ba in dastor ersal mikonim (Khat =  , tabe Show)
; 0000 007F         //Send STR (Line =  , Function Show)
; 0000 0080         putchar(13); // go to new line,Vercual Terminal
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0081 
; 0000 0082         PORTA.1 = 1 ; // LED RED
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0083         delay_ms(1000);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0084         PORTA.1 = 0 ;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0085 
; 0000 0086 }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define RX_BUFFER_SIZE 15
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_rd_index=0 , rx_wr_index = 0 ;
;#else
;unsigned int rx_rd_index=0 , rx_wr_index = 0 ;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 00A2 {
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00A3     char status,data;
; 0000 00A4     status=UCSRA;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00A5     data=UDR;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00A6 
; 0000 00A7     if(data == '&')
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00A8     {
; 0000 00A9      lcd_clear();
;PCODE: $000000FB VOL: 0
; 0000 00AA      number = 0 ;
;PCODE: $000000FC VOL: 0
; 0000 00AB      }
; 0000 00AC 
; 0000 00AD     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00AE        {
; 0000 00AF            rx_buffer[rx_wr_index++]=data;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00B0         #if RX_BUFFER_SIZE == 256
; 0000 00B1            // special case for receiver buffer size=256
; 0000 00B2            if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 00B3         #else
; 0000 00B4            if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00B5         if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00B6           {
; 0000 00B7           rx_counter=0;
;PCODE: $0000010F VOL: 0
; 0000 00B8           rx_buffer_overflow=1;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00B9 
; 0000 00BA           lcd_clear();
;PCODE: $00000113 VOL: 0
; 0000 00BB           lcd_gotoxy(0,1);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00BC           lcd_puts("=>");
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00BD           lcd_puts(rx_buffer);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00BE           lcd_gotoxy(0,2);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00BF           lcd_puts("                   ");
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00C0           number =0 ;
;PCODE: $00000124 VOL: 0
; 0000 00C1 
; 0000 00C2           PORTA.0 = 1 ; // BLUE LED on
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00C3           delay_ms(1000);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00C4           PORTA.0 = 0 ; // BLUE LED off
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00C5 
; 0000 00C6 
; 0000 00C7           }
; 0000 00C8     #endif
; 0000 00C9        }
;PCODE: $0000012B VOL: 0
; 0000 00CA 
; 0000 00CB 
; 0000 00CC 
; 0000 00CD 
; 0000 00CE }
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0

	.DSEG
_0x26:
	.BYTE 0x17
;
;
;
;void main(void)
; 0000 00D3 {

	.CSEG
;PCODE: $00000131 VOL: 0
; 0000 00D4 
; 0000 00D5 DDRB = 0XF8 ;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00D6 PORTB = 0X07 ;// 0b00000111
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00D7 
; 0000 00D8 PORTD.2 = 1 ; // INT 0 AS PULLUP
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00D9 PORTD.3 = 1 ; // INT 1 AS PULLUP
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00DA 
; 0000 00DB DDRA.0 = 1 ;// LED BLUE OUTPUT
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00DC DDRA.1 = 1 ;// LED BLUE OUTPUT
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00DD 
; 0000 00DE 
; 0000 00DF // External Interrupt(s) initialization
; 0000 00E0 // INT0: On
; 0000 00E1 // INT0 Mode: Rising Edge
; 0000 00E2 // INT1: On
; 0000 00E3 // INT1 Mode: Rising Edge
; 0000 00E4 // INT2: Off
; 0000 00E5 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00E6 MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00E7 MCUCSR=(0<<ISC2);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00E8 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00E9 
; 0000 00EA // USART initialization
; 0000 00EB // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00EC // USART Receiver: On
; 0000 00ED // USART Transmitter: On
; 0000 00EE // USART Mode: Asynchronous
; 0000 00EF // USART Baud Rate: 9600 (Double Speed Mode)
; 0000 00F0 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (1<<U2X) | (0<<MPCM);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00F1 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00F2 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00F3 UBRRH=0x00;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00F4 UBRRL=0x0C;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00F5 
; 0000 00F6 // Alphanumeric LCD initialization
; 0000 00F7 // Connections are specified in the
; 0000 00F8 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00F9 // RS - PORTC Bit 0
; 0000 00FA // RD - PORTC Bit 1
; 0000 00FB // EN - PORTC Bit 2
; 0000 00FC // D4 - PORTC Bit 4
; 0000 00FD // D5 - PORTC Bit 5
; 0000 00FE // D6 - PORTC Bit 6
; 0000 00FF // D7 - PORTC Bit 7
; 0000 0100 // Characters/line: 16
; 0000 0101 lcd_init(16);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0102 
; 0000 0103 #asm("sei")
;PCODE: $00000153 VOL: 0
	sei
;PCODE: $00000154 VOL: 0
; 0000 0104 
; 0000 0105 
; 0000 0106 while (1)
;PCODE: $00000155 VOL: 0
; 0000 0107       {
; 0000 0108         keyboard();
;PCODE: $00000156 VOL: 0
; 0000 0109       }
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 010A }
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
